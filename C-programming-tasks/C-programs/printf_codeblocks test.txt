#include <stdio.h>
#include <stdarg.h>
#include <unistd.h>
#include <stdlib.h>

/*Each function should be put in a seperate file*/

/**
 * print_str - prints a
 * variadic string
 * each per time to stdout
 * @args: variadic parameter
 *
 * Return: number of
 * characters printed
 */

int print_str(va_list args)
{
	char s = va_arg(args, char);
	int strcount = 0;

	if (s)
	{
		strcount = write(1, &s, 1);
		return(strcount);
	}
	return(0);
}

/**
 * print_char - prints a
 * character to stdout
 * @args: variadic parameter
 *
 * Return: number of
 * characters printed
 */

int print_char(va_list args)
{
	char c = (char)va_arg(args, int);
	int count = 0;

	if (c)
	{
		count = write(1, &c, 1);
		return(count);
	}
	return(0);
}

/**
 * print_cent - prints character % to
 * stdout
 * @args: variadic parameter
 *
 * Return: number of characters printed
 */

int print_cent(va_list args)
{
	char cent = va_arg(args, char);
	int centcount = 0;

	if (cent)
	{
		//centcount = write(1, &%, 1);
		return(centcount);
	}
	return(0);
}

/*check specifier function*/
/**
 * check_specifier - check that character is a valid specifier and
 * assigns appropriate function for it's printing.
 * @format: the specifier type(char*)
 *
 * Return: pointer to a function
 */
typedef struct func
{
	char *t;
	int (*f)(va_list);
} func_t;

int (*check_specifier(const char *format))(va_list)
{
	func_t my_array[4] = {
		{"c", print_char},
		{"s", print_str},
		{"%", print_cent},
		{NULL, NULL}};
	int i = 0;
	while (my_array[i].t != NULL)
    {
        if (strcmp(*(my_array[i].t), *format) == 0)
        {
            return (my_array[i].f);
        }
        i++;
    }
	return(NULL);
}

/*_printf function*/
/**
 * _printf - prints a string in a formatted way
 * @format: string to print(char *)
 * @...: variadic parameters(unknown)
 *
 * Return: number of characters printed
 */
int _printf(const char *format, ...)
{
	int i = 0;
	int count = 0;
	int value = 0;
	va_list args;
	va_start(args, format);
	int (*f)(va_list);

	if (format == NULL) /*Prevents parsing a null pointer*/
	{
		return (-1);
	}
	while (format[i]) /*Prints each character of the string*/
	{
		if (format[i] != '%')
		{
			value = write(1, &format[i], 1);
			count = count + value;
			i++;
			continue;
		}
		if (format[i] == '%')
		{
			f = check_specifier(&format[i + 1]);
			if (f != NULL)
            {
                value = f(args);
                count = count + value;
                i = i + 2;
                continue;
            }
            if (format[i + 1] == '\0')
            {
                break;
            }
            if (format[i + 1] != '\0')
            {
                value = write(1, &format[i + 1], 1);

                count = count + value;
                i = i + 2;
                continue;
            }
		}
	}
	return (count);
}
/*Main function*/
int main(void)
{
	int count_std = 0;
	int count_hmd = 0;

	write(1,"STANDARD:\n",10);
	count_std = printf("My name starts with: %c\n", 'E');
	printf("I printed %d characters\n", count_std);

	write(1,"_________________________\n\n",27);

	write(1,"HOME_MADE:\n",11);
	count_hmd = _printf("My name starts with: %c\n", 'E');
	printf("I printed %d characters\n", count_hmd);

	return (0);
}
