#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/**
* Task 0- Trust no one mandatory
* Write a function that allocates memory using malloc.
* Prototype: void *malloc_checked(unsigned int b);
* Returns a pointer to the allocated memory if malloc fails,
* the malloc_checked function should cause normal process
* termination with a status value of 98.
*/
void *malloc_checked(unsigned int b)
{
    b = malloc(sizeof(unsigned int));
    void *p = &b;
    if (p == NULL)
    {
        exit(98);
    }
    return(p);
}
/**
* Task 1. string_nconcat mandatory
* Write a function that concatenates two strings.
* Prototype: char *string_nconcat(char *s1, char *s2, unsigned int n);
* The returned pointer shall point to a newly allocated
* space in memory, which contains s1,
* followed by the first n bytes of s2, and null terminated
* If the function fails, it should return NULL If n is greater or
* equal to the length of s2
* then use the entire string s2 if NULL is passed, treat it as
* an empty string.
*/
char *string_nconcat(char *s1, char *s2, unsigned int n)
{
    char *ptr = malloc(sizeof(char));
    int a = 0, b = 0, len = 0;
    if (s1 && s2 == NULL)
    {
        return (NULL);
    }
    if (n >= strlen(s2))
    {
        return(s2);
    }
    ptr = &s1;
    for (int a = 0; s1[a] != '\0'; a++)
    {
        putchar(s1[a]);
    }
    s1[a] = s2[b];
    if (b < n)
    {
        for (int b = 0; b < n; b++)
        {
            putchar(s2[a]);
            a++;
        }
    }
    return(ptr);
}
/**
* Task 2. _calloc mandatory 
* Write a function that allocates memory for an array using malloc.
* Prototype: void *_calloc(unsigned int nmemb, unsigned int size); 
* The _calloc function allocates memory for an array of nmemb 
* elements of size bytes each and returns a pointer to the 
* allocated memory. The memory is set to zero. 
* If nmemb or size is 0, then _calloc returns NULL.
* If malloc fails, then _calloc returns NULL
*/

void *_calloc(unsigned int nmemb, unsigned int size)
{
    if (nmemb || size == 0)
    {
        return(NULL);
    }
    char *arr = malloc(sizeof(size)* nmemb);
    if (arr == '\0')
    {
        return(NULL);
    }
    char *p = &arr;
    *p = 0;
    return(p);
}
/**
* Task 3. array_range mandatory 
* Write a function that creates an array of integers.
* Prototype: int *array_range(int min, int max); 
* The array created should contain all the values from min(included) 
* to max (included), ordered from min to max 
* Return: the pointer 1to the newly created array If min > max, 
* return NULL If malloc fails, return NULL
*/
int *array_range(int min, int max)
{
    if (min > max)
    {
        return(NULL);
    }
    int len = (max - min) + 1;
    int *arr = malloc(sizeof(int)* len);
    if (arr == NULL)
    {
        return(NULL);
    }
    for (int i = 0; min <= max; i++)
    {
        arr[i] = min++;
    }
    for (int i = 0; i < 12; i++)
    {
        printf("%d", arr[i]);
    }
    return(arr);
}

int main(int argc, char *argv[])
{
    //unsigned int g;
    //malloc_checked(g);

    //char str1[] = "hades";
    //char str2[] = "curse";
    //string_nconcat(str1, str2, 5);

    int arr[10] = {1, 3, 4, 5, 2, 6, 9, 8, 7, 10};
    array_range(1, 10);


}
