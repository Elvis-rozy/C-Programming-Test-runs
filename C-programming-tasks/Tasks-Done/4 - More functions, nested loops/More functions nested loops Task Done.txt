#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <unistd.h>
#include <time.h>


/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and error is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
* Task(0)
* isupper mandatory
*Write a function that checks for uppercase character.
*/
void UpperCase_checker(char *st)
{
    int i;
    printf("%s\n", st);
    for (i = 0; st[i] != '\0'; i++)
    {
        if ((st[i] >= 'A') && (st[i] <= 'Z'))
        {
            printf("The character %c is an uppercase\n", st[i]);
        }
    }
}
/**
* Task (1)
* isdigit mandatory
* Write a function that checks for a digit (0 through 9).
*/
void Digit_checker(int *arr, int *size, int *n)
{
    int s = 0, i;
    printf("Array elements: ");
    for (; s <= size; s++)
    {
        printf("%d, ", arr[s]);
    }
    _putchar('\n');
    _putchar('\n');
    printf("checking for digit: %d\n", n);

    if ((n == NULL) || (arr == NULL))
    {
        return(NULL);
    }
    for (i = 0; arr[i] <= 9; i++)
    {
        if (arr[i] == n)
        {
            printf("The integer '%d' is present in the %dth element\n", arr[i], (i+1));
        }
    }
    _putchar('\n');
    return(0);
}
/**
* Task(2)
* Collaboration is multiplication mandatory
* Write a function that multiplies two integers.
*/
int Mult(int n, int m)
{
    return(n*m);
}
/**
* Task (3)
* The numbers speak for themselves mandatory
* Write a function that prints the numbers, from 0 to 9,
* followed by a new line.
*/
void print_num()
{
    for (int i = 48; i <= 57; i++)
    {
        _putchar(i);
        _putchar(' ');
    }
    _putchar('\n');
}
/**
* Task (4)
* I believe in numbers and signs mandatory
* Write a function that prints the numbers, from 0 to 9,
* followed by a new line.
*/
void print_numAgain()
{
    for (int i = 48; i <= 57; i++)
    {
        _putchar(i);
        if (i != 57)
        {
            _putchar(',');
        }
        _putchar(' ');
    }
    _putchar('\n');
}
/**
* Task (5)
* Numbers constitute the only universal language mandatory
* Write a function that prints 10 times the numbers,
* from 0 to 14, from 0 to 9, followed by a new line.
*/
void print_10x_num()
{
    int x = 0;
    while (x < 11)
    {
        for (int i = 48; i <= 57; i++)
        {
            _putchar(i);
            _putchar(' ');
        }
        for (int i = 10; i <= 14; i++)
        {
            printf("%d ", i);
        }
        _putchar('\n');

        x++;
    }
    _putchar('\n');
}
/**
* Task (6)
* The shortest distance between two points is a straight line
* Write a function that draws a straight line in the terminal.
*/
char print_line(int n)
{
    for (int i = 0; i <= n; i++)
    {
        _putchar('_');
    }
    _putchar('\n');
    return(0);
}

/**
* Task (7)
* I feel like I am diagonally parked in a parallel universe
* Write a function that draws a diagonal line on the terminal.
*/
char print_diagonal(int n)
{
    int i = 0;
    if (n <= 0)
    {
        _putchar('\n');
    }
    while (i < n)
    {
        int m = 0;
        while (m < i)
        {
            _putchar(' ');
            m++;
        }
        _putchar('\\');
        _putchar('\n');
        i++;
    }
    return(0);
}
/**
* Task (8)
* You are so much sunshine in every square inch mandatory
* Write a function that prints a square, followed by a new
* line.
*/
char print_square(int size)
{
    int j, i;
    if (size <= 0)
    {
        _putchar('\n');
    }
    for (i = 0; i < size; i++)
    {
        for (j = 0; j < size; j++)
        {
            _putchar('.');
            _putchar(' ');
        }
        _putchar('\n');

    }
    return(0);
}
/**
* Task (9)
* Fizz-Buzz mandatory The “Fizz-Buzz test” is an interview
* question designed to help filter out the 99.5% of
* programming job candidates who can’t seem to program their
* way out of a wet paper bag.
* Write a program that prints the numbers from 1 to 100,
* followed by a new line. But for multiples of three print
* Fizz instead of the number and for the multiples of five
* print Buzz. For numbers which are multiples of both three
* and five print FizzBuzz.
*/
void fizzBuzz(int n, int m)
{
    int i;
    for (i = 0; i < 100; i++)
    {
        if (((i+1) % n == 0) && ((i+1) % m != 0))
        {
            printf("Fizz, ");
            continue;
        }
        if (((i+1) % m == 0) && ((i+1) % n != 0))
        {
            printf("Buzz, ");
            continue;
        }
        if (((i+1) % n == 0) && ((i+1) % m == 0))
        {
            printf("FizzBuzz, ");
            continue;
        }
        printf("%d", i+1);
        if (i != 99)
        {
            printf(", ");
        }
    }
    _putchar('\n');
    return(0);
}
char print_triangle(int m)
{
    int i, j, n;
    if (m <= 0)
    {
        _putchar('\n');
    }
    else
    {
        for (i = 1; i <= m; i++)
        {
            for (n = m-i; n >= 1; n--)
            {
                _putchar(' ');
            }
            for (j = 1; j <= i; j++)
            {
                _putchar('.');
            }
            _putchar('\n');
        }
    }
    return(0);
}
/**
* Task (11)
* The problem of distinguishing prime numbers from composite
* numbers and of resolving the latter into their prime factors
* is known to be one of the most important and useful in
* arithmetic. #advanced
* The prime factors of 1231952 are 2, 2, 2, 2, 37 and 2081.
* Write a program that finds and prints the largest prime
* factor of the number 612852475143, followed by a new line.
*/
int prime_factor(int n)
{
    printf("%d", n);
    _putchar('\n');
    return(0);
}
/**
* Task (12)
* Numbers have life; they're not just symbols on paper
* Write a function that prints an integer.
*/
print_int(int n)
{
    printf("%d", n);
    return(0);
}

int main(int ac, char *av[])
{
    int A = 5, B = 3, C = 612852475143, D = 1023;
    char string[] = "The Dragons Are Coming Home";
    int arr[] = {0, 1, 2, 3, 4, 5, 6, 7, 5, 9, 101, 11};

    printf("Task 0 answer:\n");
    UpperCase_checker(string);
    _putchar('\n');

    printf("Task 1 answer:\n");
    Digit_checker(arr,11 , 5);
    _putchar('\n');

    printf("Task 2 answer:\n");
    printf("%d * %d = %d", A, B, Mult(A, B));
    printf("\n\n");

    printf("Task 3 answer:\n");
    print_num();
    _putchar('\n');

    printf("Task 4 answer:\n");
    print_numAgain();
    _putchar('\n');

    printf("Task 5 answer:\n");
    print_10x_num();
    _putchar('\n');

    printf("Task 6 answer:\n");
    printf("%c", print_line(12));
    _putchar('\n');

    printf("Task 7 answer:\n");
    printf("%c", print_diagonal(10));
    _putchar('\n');

    printf("Task 8 answer:\n");
    print_square(12);
    _putchar('\n');

    printf("Task 9 answer:\n");
    fizzBuzz(3, 5);
    _putchar('\n');

    printf("Task 10 answer:\n");
    print_triangle(10);
    _putchar('\n');

    printf("Task 11 answer:\n");
    prime_factor(C);
    _putchar('\n');

    printf("Task 12 answer:\n");
    print_int(D);
    _putchar('\n');
}
