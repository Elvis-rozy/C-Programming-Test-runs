#include <stdio.h>
#include<stdlib.h>
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and error is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
* Task 0.
* Write a program that prints _putchar, followed
* by a new line. The program should return 0.
*/
void print_putchar(void)
{
    _putchar('_');
    _putchar('p');
    _putchar('u');
    _putchar('t');
    _putchar('c');
    _putchar('h');
    _putchar('a');
    _putchar('r');
    _putchar('\n');
}

/**
* Task. 1
* Write a function that prints the alphabet,
* in lowercase, followed by a new line.
* Prototype: void print_alphabet(void); You can only use
* _putchar twice in your code
*/
void print_alphabet(void)
{
    for (int i = 'a'; i <= 'z'; i++)
    {
        _putchar(i);
    }
    _putchar('\n');
    return(0);
}
/**
* Task 2.
* Write a function that prints 10 times the alphabet,
* in lowercase, followed by a new line.
* Prototype: void print_alphabet_x10(void);
* You can only use _putchar twice in your code
*/
void print_alphabet_x10(void)
{
    for (int j = 0; j < 10; j++)
    {
        for (int i = 'a'; i <= 'z'; i++)
        {
            _putchar(i);
        }
        _putchar('\n');
    }
    return(0);
}
/**
* Task. 3
* Write a function that checks for lowercase character.
* Prototype: int _islower(int c); Returns 1 if c is lowercase
* Returns 0 otherwise FYI: The standard library provides a
* similar function: islower. Run man islower to learn more.
*/
int _islower(int c)
{
    if ((c >= 'a') && (c <= 'z'))
    {
        return(1);
    }
    else
    {
        return(0);
    }
}
/**
* Task 4.
* Write a function that checks for alphabetic character.
* Prototype: int _isalpha(int c); Returns 1 if c is a letter,
* lowercase or uppercase Returns 0 otherwise FYI:
* The standard library provides a similar function: isalpha.
* Run man isalpha to learn more.
*/
int _isalpha(int c)
{
    if ((c >= 'A') && (c <= 'Z'))
    {
        if ((c >= 'a') && (c <= 'z'))
        {
            return(1);
        }
        else
        {
            return(0);
        }
    }
}
/**
* Task 5.
* Write a function that prints the sign of a number.
* Prototype: int print_sign(int n); Returns 1 and prints +
* if n is greater than zero Returns 0 and prints 0
* if n is zero Returns -1 and prints - if n is less than zero
*/
int print_sign(int n)
{
    if (n < 0)
    {
        _putchar('-');
        return (-1);
    }
    if (n == 0)
    {
        _putchar('0');
        return (0);
    }
    else
    {
        _putchar('+');
        return (1);
    }
}
/**
* Task 6.
* Write a function that computes the absolute value of an
* integer.
* Prototype: int _abs(int); FYI: The standard library provides
* a similar function: abs. Run man abs to learn more.
*/
int _abs(int n)
{
    int m;
    if (n < 0)
    {
        m = (n *( -1));
    }
    return(m);
}
/**
* Task 7.
* Write a function that prints the last digit of a number.
* Prototype: int print_last_digit(int); Returns the value of
* the last digit
*/
int print_last_digit(int n)
{
    int m;
    m = (n % 10);
    if (m < 0)
    {
        m = (m * (-1));
    }
    _putchar(m + '0');
    return(m);
}
/**
* Task 8.
* Write a function that prints every minute of the day of
* Jack Bauer, starting from 00:00 to 23:59.
* Prototype: void jack_bauer(void);
*/
void jack_bauer(void)
{
    for (int j = 0; j < 24; j++)
    {
        for (int i= 0; i < 60; i++)
        {
            if (j < 10)
            {
                printf("0");
            }
            printf("%d", j);
            _putchar(':');
            if (i < 10)
            {
                printf("0");
            }
            printf("%d", i);
            _putchar('\n');
        }
    }
}
/**
* Task 9.
* Write a function that prints the 9 times table, starting
* with 0. Write a function that prints the 9 times table,
* starting with 0.
* Prototype: void times_table(void); Format: see example
*/
void times_table(void)
{
    int j = 0;
    while (j < 13)
    for (int i = 0; i < 109; i+=9)
    {
        printf("9 x %d = %d\n", j, i);
        j++;
    }
    return(0);
}
/**
* Task 10.
* Write a function that adds two integers and returns the
* result.
* Prototype: int add(int, int);
*/
int add(int n, int m)
{
    return(n + m);
}
/**
* Task 11.
* Write a function that prints all natural numbers from n to 98,
* followed by a new line.
* Prototype: void print_to_98(int n); Numbers must be separated
* by a comma, followed by a space Numbers should be printed
* in order The first printed number should be the number
* passed to your function The last printed number should be 98
* You are allowed to use the standard library
*/
void print_to_98(int n)
{
    for (int i = n; i < 99; i++)
    {
        printf("%d", i);
        if (i < 98)
        {
            _putchar(',');
            _putchar(' ');
        }
    }
    _putchar('\n');
}
/**
* Task 12.
* Write a function that prints the n times table, starting
* with 0. Prototype: void print_times_table(int n);
* If n is greater than 15 or less than 0 the function should
* not print anything Format: see example
*/
void print_times_table(int n)
{
    int j = 0;
    while (j < 13)
    for (int i = 0; i <= (n*12); i+=n)
    {
        printf("%d x %d = %d\n", n, j, i);
        j++;
    }
    return(0);
}
/**
* Task 13.
* If we list all the natural numbers below 10 that
* are multiples of 3 or 5, we get 3, 5, 6 and 9.
* The sum of these multiples is 23.
* Write a program that computes and prints the sum of all the
* multiples of 3 or 5 below 1024 (excluded), followed by a
* new line.
*/
void print_sum(int x, int y)
{
    int sum = 0;
    if ((x % 3 == 0) && (y % 5 == 0))
    {
        printf("The multiples of 3 and 5 are:\n");
        while (x && y < 1024)
        {
            sum = sum + (x + y);
            printf("%d", x);
            _putchar(',');
            _putchar(' ');
            printf("%d", y);
            _putchar(',');
            _putchar(' ');
            x+=3;
            y+=5;
        }
    }
    _putchar('\n');
    printf("And the sum of all the multiples is:\n");
    printf("%d\n", sum);
}

int main(int argc, char *argv[])
{
    /*printf("Task 0 answer:\n");
    print_putchar();
    _putchar('\n');
    printf("Task 1 answer:\n");
    print_alphabet();
    _putchar('\n');
    printf("Task 2 answer:\n");
    print_alphabet_x10();
    _putchar('\n');
*/
    int c, d, n = 3, m = 5, p = 14;
  /*_islower(c);
    _isalpha(d);
    printf("Task 5 answer:\n");
    print_sign(n);
    _putchar('\n');
    printf("Task 6 answer:\n");
    printf("%d\n", _abs(n));
    printf("Task 7 answer:\n");
    print_last_digit(n);
    _putchar('\n');
    printf("Task 8 answer:\n");
    jack_bauer();
    _putchar('\n');
    printf("Task 9 answer:\n");
    times_table();
    _putchar('\n');
    printf("Task 10 answer:\n");
    printf("%d\n", add(m, p));
    _putchar('\n');
    printf("Task 11 answer:\n");
    print_to_98(m);
    _putchar('\n');
    printf("Task 12 answer:\n");
    print_times_table(2);
    _putchar('\n');
    printf("Task 13 answer:\n");*/
    print_sum(n, m);



}
