/** Task 0. DONE
* It ain't what they call you, it's what you answer to.
* Write a program that prints its name, followed by a new line.
* If you rename the program, it will print the new name,
* without having to compile it again, You should not remove
* the path before the name of the program.
*/
/**
* Task 1. DONE
* Silence is argument carried out by other means mandatory
* Write a program that prints the number of arguments passed
* into it. Your program should print a number, followed by
* a new line
*/


/**
* Task 2.
* The best argument against democracy is a five-minute
* conversation with the average voter mandatory
* Write a program that prints all arguments it receives.
* All arguments should be printed, including the first one
* Only print one argument per line, ending with a new line
*/
void print_args()
{

}

/**
* Task 3.
* Neither irony nor sarcasm is argument mandatory
* Write a program that multiplies two numbers.
* Your program should print the result of the multiplication,
* followed by a new line. You can assume that the two numbers
* and result of the multiplication can be stored in an integer
* If the program does not receive two arguments, your program
* should print Error, followed by a new line, and return 1.
*/
int mult(int n, int m)
{

}

/**
* Task 4.
* To infinity and beyond mandatory
* Write a program that adds positive numbers.
* Print the result, followed by a new line If no number is
* passed to the program, print 0, followed by a new line
* If one of the number contains symbols that are not digits,
* print Error, followed by a new line, and return 1
* You can assume that numbers and the addition of all the
* numbers can be stored in an int.
*/
int add_positive()
{

}
int main(int argc, char *argv[])
{
    int i, j;

    printf("Task 0 answer:\n");
    printf("%s\n", *argv);

    printf("\nTask 1 answer:\n");
    printf("%d\n", (argc - 1));

    printf("\nTask 2 answer:\n");
    for (i = 0; i < (argc - 1); i++)
    {
        printf("%s\n", argv[i]);
    }

    printf("\nTask 3 answer:\n");
    if ((argc - 1) > 3)
    {
        printf("Error\n");
        return(1);
    }
    printf("%d x %d = %d\n", atoi(argv[1]), atoi(argv[2]), atoi(argv[1]) * atoi(argv[2]));

    printf("\nTask 4 answer:\n");
    if (atoi(argv > 0))
    {
        for (j = 0; j < (argc - 1); j++)
        {
            printf("%d\n",atoi(argv[j]) + atoi(argv[j+1]));
        }
    }
    if ((argc - 1) == 0)
    {
        printf("0\n");
    }
    //if ((atoi(argv) != (int)))
    {
        printf("Error\n");
        return(1);
    }

    return(0);
}
