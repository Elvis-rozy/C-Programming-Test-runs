#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>
#include <time.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and error is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
* Tsk 0. Beauty is variable, ugliness is constant mandatory
* Write a function that returns the sum of all its parameters.
* Prototype: int sum_them_all(const unsigned int n, ...);
* If n == 0, return 0
*/
int sum_them_all(const unsigned int n, ...)
{
    int sum;
    unsigned int i;
    va_list ap;
    va_start(ap, n);
    if (n == 0)
    {
        return(0);
    }
    for (i = 0; i < n; i++)
    {
        sum += va_arg(ap, int);
    }
    va_end(ap);
    return(sum);
}
/**
* Task 1.
* To be is to be the value of a variable mandatory
* Write a function that prints numbers, followed by a new line.
* Prototype:
* void print_numbers(const char *separator, const unsigned int n, ...);
* where separator is the string to be printed between numbers
* and n is the number of integers passed to the function
* You are allowed to use printf If separator is NULL,
* don’t print it Print a new line at the end of your function.
*/
void print_numbers(const char *separator, const unsigned int n, ...)
{
    unsigned int i;
    va_list ap;
    va_start(ap, n);

    for (i = 0; i < n; i++)
    {
        printf("%d", va_arg(ap, int));
        if (*separator == '\0')
        {
            continue;
        }
        if (i < n - 1)
        {
            printf("%s", separator);
        }
    }
    va_end(ap);
    printf("\n");
    return(0);
}
/**
* Task 2.
* One woman's constant is another woman's variable mandatory
* Write a function that prints strings, followed by a new line.
* Prototype: void print_strings(const char *separator, const unsigned int n, ...);
* where separator is the string to be printed between the strings
* and n is the number of strings passed to the function
* You are allowed to use printf If separator is NULL,
* don’t print it If one of the string is NULL, print (nil)
* instead Print a new line at the end of your function.
*/
void print_strings(const char *separator, const unsigned int n, ...)
{
    char *str;
    unsigned int i;
    va_list ap;

    va_start(ap, n);
    for (i = 0; i < n; i++)
    {
        str = va_arg(ap, char *);
        if (str == NULL)
        {
            str == "(nil)";
        }
        printf("%s", str);
        if (*separator == '\0')
        {
            continue;
        }
        if (i < n - 1)
        {
            printf("%s", separator);
        }
    }
    printf("\n");
    va_end(ap);
    return(0);
}
/**
* Task 3.
* To be is a to be the value of a variable mandatory
* Write a function that prints anything.
* Prototype: void print_all(const char * const format, ...);
* where format is a list of types of arguments passed to the
* function c: char i: integer f: float s: char * (if the string
* is NULL, print (nil) instead any other char should be ignored
* see example You are not allowed to use for, goto, ternary
* operator, else, do ... while You can use a maximum of 2 while
* loops 2 if You can declare a maximum of 9 variables You are
* allowed to use printf Print a new line at the end of your
* function
*/
void print_all(const char * const format, ...)
{
    int i, flag;
    char *str;
    va_list a_list;

    va_start(a_list, format);
    i = 0;
    while (format != NULL && format[i] != '\0')
    {
        switch(format[i])
        {
        case 'c':
            printf("%c", va_arg(a_list, int));
            flag = 0;
            break;
        case 'i':
            printf("%i", va_arg(a_list, int));
            flag = 0;
            break;
        case 'f':
            printf("%f", va_arg(a_list, double));
            flag = 0;
            break;
        case 's':
            str = va_arg(a_list, char *);
            if (str == NULL)
                str = "(nil)";
            printf("%s", str);
            flag = 0;
            break;
        default:
            flag = 1;
            break;
        }
        if (format[i + 1] != '\0' && flag == 0)
        {
            printf(", ");
        }
        i++;
    }
    printf("'\n");
    va_end(a_list);
}

int main(int ac, char *av[])
{
    char a = 'g';
    int fr = 203;
    float hub = 609.77;
    char string[] = ", ";
    char string1[] = "Drogon";
    char string2[] = "Legolas";
    char string3[] = "Aragon";
    char string4[] = "Viserys";

    printf("Task 0 answer\n");
    printf("%-8d\n", sum_them_all(3, 20, 20, 60));
    printf("\n");

    printf("Task 1 answer\n");
    print_numbers(string, 4, 10, 89, 76, 55);
    printf("\n");

    printf("Task 2 answer\n");
    print_strings(string, 4, string1, string2, string3, string4);
    printf("\n");

    printf("Task 3 answer\n");
    print_all(4, a, fr, hub, string1);
    printf("\n");
}


